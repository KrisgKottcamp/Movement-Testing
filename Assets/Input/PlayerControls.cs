//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Input/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""BasicGameplay"",
            ""id"": ""f7ee5bc5-9265-4b28-af13-24c4390f579e"",
            ""actions"": [
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""1868b409-d59c-499b-b431-ca1581856ece"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MovementController"",
                    ""type"": ""Value"",
                    ""id"": ""285e11ba-441e-4379-92b0-c61ea7846857"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MeleeAttack"",
                    ""type"": ""Button"",
                    ""id"": ""77546f8b-fd12-4045-84a8-46d3eee6afaf"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e98bfd3f-2344-4589-a914-dc3fccc83299"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""68e997b8-ca50-4a67-a13c-5de1bcb3b6f3"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""60032133-8b62-4184-8d63-611f16807420"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b65cfc70-e39e-4d2c-a57e-504a8b8e97d7"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f2e6dacd-bf1b-4311-a419-f4f7ae1dffa0"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""78f7592d-d469-4f5a-bbd3-efd968aac26c"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementController"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ac2c2360-8bf9-43e2-9ef1-85e81d1cc19c"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MeleeAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // BasicGameplay
        m_BasicGameplay = asset.FindActionMap("BasicGameplay", throwIfNotFound: true);
        m_BasicGameplay_Dash = m_BasicGameplay.FindAction("Dash", throwIfNotFound: true);
        m_BasicGameplay_MovementController = m_BasicGameplay.FindAction("MovementController", throwIfNotFound: true);
        m_BasicGameplay_MeleeAttack = m_BasicGameplay.FindAction("MeleeAttack", throwIfNotFound: true);
    }

    ~@PlayerControls()
    {
        UnityEngine.Debug.Assert(!m_BasicGameplay.enabled, "This will cause a leak and performance issues, PlayerControls.BasicGameplay.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BasicGameplay
    private readonly InputActionMap m_BasicGameplay;
    private List<IBasicGameplayActions> m_BasicGameplayActionsCallbackInterfaces = new List<IBasicGameplayActions>();
    private readonly InputAction m_BasicGameplay_Dash;
    private readonly InputAction m_BasicGameplay_MovementController;
    private readonly InputAction m_BasicGameplay_MeleeAttack;
    public struct BasicGameplayActions
    {
        private @PlayerControls m_Wrapper;
        public BasicGameplayActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Dash => m_Wrapper.m_BasicGameplay_Dash;
        public InputAction @MovementController => m_Wrapper.m_BasicGameplay_MovementController;
        public InputAction @MeleeAttack => m_Wrapper.m_BasicGameplay_MeleeAttack;
        public InputActionMap Get() { return m_Wrapper.m_BasicGameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BasicGameplayActions set) { return set.Get(); }
        public void AddCallbacks(IBasicGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_BasicGameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BasicGameplayActionsCallbackInterfaces.Add(instance);
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
            @MovementController.started += instance.OnMovementController;
            @MovementController.performed += instance.OnMovementController;
            @MovementController.canceled += instance.OnMovementController;
            @MeleeAttack.started += instance.OnMeleeAttack;
            @MeleeAttack.performed += instance.OnMeleeAttack;
            @MeleeAttack.canceled += instance.OnMeleeAttack;
        }

        private void UnregisterCallbacks(IBasicGameplayActions instance)
        {
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
            @MovementController.started -= instance.OnMovementController;
            @MovementController.performed -= instance.OnMovementController;
            @MovementController.canceled -= instance.OnMovementController;
            @MeleeAttack.started -= instance.OnMeleeAttack;
            @MeleeAttack.performed -= instance.OnMeleeAttack;
            @MeleeAttack.canceled -= instance.OnMeleeAttack;
        }

        public void RemoveCallbacks(IBasicGameplayActions instance)
        {
            if (m_Wrapper.m_BasicGameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBasicGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_BasicGameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BasicGameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BasicGameplayActions @BasicGameplay => new BasicGameplayActions(this);
    public interface IBasicGameplayActions
    {
        void OnDash(InputAction.CallbackContext context);
        void OnMovementController(InputAction.CallbackContext context);
        void OnMeleeAttack(InputAction.CallbackContext context);
    }
}
